KMD
00000000: E28FDFFA    ; ADR     SP, _stack      ; set SP pointing to the end of our stack
00000004: EA000186    ;         B       main
00000008:             ;         DEFS    1000    ; this chunk of memory is for the stack
000003F0:             ; _stack
000003F0:             ;                         ;public class VM {
000003F0:             ;                         ;static final int
000003F0:             ; iadd    EQU     0       ;iadd=0, imul=1, ifgt=2, if_icmplt=3, bipush=4,
000003F0:             ; imul    EQU     1
000003F0:             ; ifgt    EQU     2
000003F0:             ; if_icmplt EQU   3
000003F0:             ; bipush  EQU     4
000003F0:             ; go_to   EQU     5       ;go_to=5, iload=6, istore=7, iprint=8, stop=9;
000003F0:             ; iload   EQU     6
000003F0:             ; istore  EQU     7
000003F0:             ; iprint  EQU     8
000003F0:             ; stop    EQU     9
000003F0:             ; 
000003F0:             ; ;the following defines "code" and initialises it
000003F0:             ; code                    ;static int [] code= new int[100];
000003F0:             ;                         ;static void initcode () {
000003F0:             ;                         ;//example1
000003F0:             ;                         ;//int a = 1;
000003F0: 00000004    ;   DEFW  bipush, 1       ;code[0]= bipush; code[1]= 1;
000003F4: 00000001    ; 
000003F8: 00000007    ;   DEFW  istore, 1       ;code[2]= istore; code[3]= 1;
000003FC: 00000001    ; 
00000400:             ;                         ;//jump to test for while
00000400: 00000005    ;   DEFW  go_to, 12       ;code[4]= go_to; code[5]= 12; //12+4=16
00000404: 0000000C    ; 
00000408:             ;                         ;//print a
00000408: 00000006    ;   DEFW  iload, 1        ;code[6]= iload; code[7]= 1;
0000040C: 00000001    ; 
00000410: 00000008    ;   DEFW  iprint          ;code[8]= iprint;
00000414:             ;                         ;//a = a * 2;
00000414: 00000006    ;   DEFW  iload, 1        ;code[9]= iload; code[10]= 1;
00000418: 00000001    ; 
0000041C: 00000004    ;   DEFW  bipush, 2       ;code[11]= bipush; code[12]= 2;
00000420: 00000002    ; 
00000424: 00000001    ;   DEFW  imul            ;code[13]= imul;
00000428: 00000007    ;   DEFW  istore, 1       ;code[14]= istore; code[15]= 1;
0000042C: 00000001    ; 
00000430:             ;                         ;//while (a * 2 > 0)
00000430: 00000006    ;   DEFW  iload, 1        ;code[16]= iload; code[17]= 1;
00000434: 00000001    ; 
00000438: 00000004    ;   DEFW  bipush, 2       ;code[18]= bipush; code[19]= 2;
0000043C: 00000002    ; 
00000440: 00000001    ;   DEFW  imul            ;code[20]= imul;
00000444: 00000002    ;   DEFW  ifgt, -15       ;code[21]= ifgt; code[22]= -15; //21-15=6
00000448: FFFFFFF1    ; 
0000044C:             ;                         ;//end
0000044C:             ;                         ;//print a
0000044C: 00000006    ;   DEFW  iload, 1        ;code[23]= iload; code[24]= 1;
00000450: 00000001    ; 
00000454: 00000008    ;   DEFW  iprint          ;code[25]= iprint;
00000458: 00000009    ;   DEFW  stop            ;code[26]= stop;
0000045C: 00000000    ;   DEFW  0, 0, 0         ; [27] [28] [29]
00000460: 00000000    ; 
00000464: 00000000    ; 
00000468:             ;                         ;//example2
00000468:             ;                         ;//int vol = 200;
00000468: 00000004    ;   DEFW  bipush, 200     ;code[30]= bipush; code[31]= 200;
0000046C: 000000C8    ; 
00000470: 00000007    ;   DEFW  istore, 1       ;code[32]= istore; code[33]= 1;
00000474: 00000001    ; 
00000478:             ;                         ;//int side= 1;
00000478: 00000004    ;   DEFW  bipush, 1       ;code[34]= bipush; code[35]= 1;
0000047C: 00000001    ; 
00000480: 00000007    ;   DEFW  istore, 2       ;code[36]= istore; code[37]= 2;
00000484: 00000002    ; 
00000488:             ;                         ;//jump to test for while
00000488: 00000005    ;   DEFW  go_to, 12       ;code[38]= go_to; code[39]= 12; //38+12 =50
0000048C: 0000000C    ; 
00000490:             ;                         ;//System.out.println(" "+side);
00000490: 00000006    ;   DEFW  iload, 2        ;code[40]= iload; code[41]= 2;
00000494: 00000002    ; 
00000498: 00000008    ;   DEFW  iprint          ;code[42]= iprint;
0000049C:             ;                         ;//side = side + 1;
0000049C: 00000006    ;   DEFW  iload, 2        ;code[43]= iload; code[44]= 2;
000004A0: 00000002    ; 
000004A4: 00000004    ;   DEFW  bipush, 1       ;code[45]= bipush; code[46]= 1;
000004A8: 00000001    ; 
000004AC: 00000000    ;   DEFW  iadd            ;code[47]= iadd;
000004B0: 00000007    ;   DEFW  istore, 2       ;code[48]= istore; code[49]= 2;
000004B4: 00000002    ; 
000004B8:             ;                         ;//while (side * side * side < vol)
000004B8: 00000006    ;   DEFW  iload, 2        ;code[50]= iload; code[51]= 2;
000004BC: 00000002    ; 
000004C0: 00000006    ;   DEFW  iload, 2        ;code[52]= iload; code[53]= 2;
000004C4: 00000002    ; 
000004C8: 00000001    ;   DEFW  imul            ;code[54]= imul;
000004CC: 00000006    ;   DEFW  iload, 2        ;code[55]= iload; code[56]= 2;
000004D0: 00000002    ; 
000004D4: 00000001    ;   DEFW  imul            ;code[57]= imul;
000004D8: 00000006    ;   DEFW  iload, 1        ;code[58]= iload; code[59]= 1;
000004DC: 00000001    ; 
000004E0: 00000003    ;   DEFW  if_icmplt, -20  ;code[60]= if_icmplt; code[61]= -20; //60-20 = 40
000004E4: FFFFFFEC    ; 
000004E8:             ;                         ;//}
000004E8: 00000009    ;   DEFW  stop            ;code[62]= stop;
000004EC:             ;                         ;}
000004EC:             ; 
000004EC: 74 72 61 63 ; _trace1 DEFB    "trace: vmPC=",0
000004F0: 65 3A 20 76 ; 
000004F4: 6D 50 43 3D ; 
000004F8: 00          ; 
000004FC:             ;         ALIGN
000004FC: 20 63 6F 64 ; _trace2 DEFB    " code=",0
00000500: 65 3D 00    ; 
00000504:             ;         ALIGN
00000504: 20 76 6D 53 ; _trace3 DEFB    " vmSP=",0
00000508: 50 3D 00    ; 
0000050C:             ;         ALIGN
0000050C: 6E 6F 74 20 ; _notimpl DEFB   "not implemented:",0
00000510: 69 6D 70 6C ; 
00000514: 65 6D 65 6E ; 
00000518: 74 65 64 3A ; 
0000051C: 00          ; 
00000520:             ;         ALIGN
00000520:             ; 
00000520:             ; stack   DEFS 40         ;int [] stack= new int[10];
00000548:             ; vars    DEFS 40         ;int [] vars= new int[10];
00000570:             ; 
00000570:             ; vmPC    RN      R2      ;use R2 for vmPC
00000570:             ; vmSP    RN      R3      ;use R3 for vmSP
00000570:             ; done    RN      R4      ;use R4 for done
00000570:             ; 
00000570:             ; getCode ; R0 = code[vmPC]
00000570: E92D0300    ;         STMFD SP!, {R8,R9}
00000574: E1A09002    ;         MOV   R9, vmPC
00000578: E3A08004    ;         MOV   R8, #4
0000057C: E0090899    ;         MUL   R9, R9, R8
00000580: E24F8F66    ;         ADR   R8, code
00000584: E0899008    ;         ADD   R9, R9, R8
00000588: E5190000    ;         LDR   R0, [R9]
0000058C: E8BD0300    ;         LDMFD SP!, {R8,R9}
00000590: E1A0F00E    ;         MOV   PC, LR
00000594:             ; 
00000594:             ; popR0   ; R0 = stack[vmSP++]
00000594: E92D0300    ;         STMFD SP!, {R8,R9}
00000598: E1A09003    ;         MOV   R9, vmSP
0000059C: E2833001    ;         ADD   vmSP, vmSP, #1
000005A0: E3A08004    ;         MOV   R8, #4
000005A4: E0090899    ;         MUL   R9, R9, R8
000005A8: E24F8090    ;         ADR   R8, stack
000005AC: E0899008    ;         ADD   R9, R9, R8
000005B0: E5190000    ;         LDR   R0, [R9]
000005B4: E8BD0300    ;         LDMFD SP!, {R8,R9}
000005B8: E1A0F00E    ;         MOV   PC, LR
000005BC:             ; 
000005BC:             ; pushR0  ; stack[--vmSP] = R0
000005BC: E92D0300    ;         STMFD SP!, {R8,R9}
000005C0: E2433001    ;         SUB   vmSP, vmSP, #1
000005C4: E1A09003    ;         MOV   R9, vmSP
000005C8: E3A08004    ;         MOV   R8, #4
000005CC: E0090899    ;         MUL   R9, R9, R8
000005D0: E24F80B8    ;         ADR   R8, stack
000005D4: E0899008    ;         ADD   R9, R9, R8
000005D8: E5090000    ;         STR   R0, [R9]
000005DC: E8BD0300    ;         LDMFD SP!, {R8,R9}
000005E0: E1A0F00E    ;         MOV   PC, LR
000005E4:             ; 
000005E4:             ; getVars ;R0=vars[R0]
000005E4: E92D0300    ;         STMFD SP!, {R8,R9}
000005E8: E3A08004    ;         MOV  R8, #4
000005EC: E0090890    ;         MUL  R9, R0, R8
000005F0: E24F80B0    ;         ADR  R8, vars
000005F4: E0899008    ;         ADD  R9, R9, R8
000005F8: E5190000    ;         LDR  R0, [R9]
000005FC: E8BD0300    ;         LDMFD SP!, {R8,R9}
00000600: E1A0F00E    ;         MOV  PC, LR
00000604:             ; 
00000604:             ; putVars ;vars[R1]=R0
00000604: E92D0300    ;         STMFD SP!, {R8,R9}
00000608: E3A08004    ;         MOV  R8, #4
0000060C: E0090891    ;         MUL  R9, R1, R8
00000610: E24F80D0    ;         ADR  R8, vars
00000614: E0899008    ;         ADD  R9, R9, R8
00000618: E5090000    ;         STR  R0, [R9]
0000061C: E8BD0300    ;         LDMFD SP!, {R8,R9}
00000620: E1A0F00E    ;         MOV  PC, LR
00000624:             ; 
00000624:             ; main    ;public static void main (String argv[]) {
00000624: E3A04000    ;         MOV done, #0;                   
00000628: E3A02000    ;         MOV vmPC, #0;                  
0000062C: E3A0300A    ;         MOV vmSP, #10;                  
00000630:             ;         ;nothing needed for: initcode1();
00000630:             ; 
00000630:             ; while   ;while (!done) {
00000630:             ; 
00000630: E3540000    ;         CMP done, #0;                   (done == 0)
00000634: 1A000062    ;         BNE endwhile;                 false -> end while
00000638:             ; 
00000638:             ;         ;this code does System.out.println("trace: vmPC=" + vmPC
00000638:             ;         ;  + " code=" + code[vmPC] + " vmSP=" + vmSP);
00000638: E24F0F55    ;         ADR R0, _trace1
0000063C: EF000003    ;         SVC 3
00000640: E1A00002    ;         MOV R0, vmPC
00000644: EF000004    ;         SVC 4
00000648: E24F0F55    ;         ADR R0, _trace2
0000064C: EF000003    ;         SVC 3
00000650: EBFFFFC6    ;         BL  getCode
00000654: EF000004    ;         SVC 4
00000658: E24F0F57    ;         ADR R0, _trace3
0000065C: EF000003    ;         SVC 3
00000660: E1A00003    ;         MOV R0, vmSP
00000664: EF000004    ;         SVC 4
00000668: E3A0000A    ;         MOV R0, #10
0000066C: EF000000    ;         SVC 0
00000670:             ; 
00000670: EBFFFFBE    ;         BL getCode;                   
00000674: E28F700C    ;         ADR R7, switch;                
00000678: E3A0A004    ;         MOV R10, #4;                     
0000067C: E0000A90    ;         MUL R0, R0, R10;               
00000680: E2822001    ;         ADD vmPC, vmPC, #1;              
00000684: E797F000    ;         LDR PC, [R7, R0];              
00000688:             ; 
00000688: 000006E8    ; switch  DEFW    case_iadd;            
0000068C: 0000073C    ;         DEFW    case_imul;              
00000690: 000006C0    ;         DEFW    case_ifgt;           
00000694: 00000770    ;         DEFW    case_if_icmplt;         
00000698: 0000072C    ;         DEFW    case_bipush;          
0000069C: 000006B0    ;         DEFW    case_go_to;            
000006A0: 00000700    ;         DEFW    case_iload;            
000006A4: 00000714    ;         DEFW    case_istore;           
000006A8: 00000754    ;         DEFW    case_iprint;           
000006AC: 00000768    ;         DEFW    case_stop;              
000006B0:             ; 
000006B0:             ; case_go_to      ;case go_to: 
000006B0: EBFFFFAE    ;                 BL getCode;           
000006B4: E0822000    ;                 ADD vmPC, vmPC, R0;     
000006B8: E2422001    ;                 SUB vmPC, vmPC, #1;   
000006BC: EAFFFFDB    ;                 B while; 
000006C0:             ;                 ; vmPC= code[vmPC++] + vmPC - 2;
000006C0:             ;                 ;break;           
000006C0:             ; 
000006C0:             ; case_ifgt       ;case ifgt:
000006C0: EBFFFFAA    ;                 BL getCode;           
000006C4: E2822001    ;                 ADD vmPC, vmPC, #1;  
000006C8: E1A0A000    ;                 MOV R10, R0;    
000006CC: E08AA002    ;                 ADD R10, R10, vmPC;    
000006D0: E24AA002    ;                 SUB R10, R10, #2;       
000006D4: EBFFFFAE    ;                 BL popR0;            
000006D8: E3500000    ;                 CMP R0, #0;                 
000006DC: DA000000    ;                 BLE skip2;          
000006E0: E1A0200A    ;                 MOV vmPC, R10;       
000006E4: EAFFFFD1    ; skip2           B while; 
000006E8:             ;                 ;{int target= code[vmPC++] + vmPC - 2;
000006E8:             ;                 ;if (stack[vmSP++]>0)
000006E8:             ;                 ;vmPC= target;
000006E8:             ;                 ;}
000006E8:             ;                 ;break;
000006E8:             ; 
000006E8:             ; case_iadd       ;case iadd -> same as imul, but for addition
000006E8: EBFFFFA9    ;                 BL popR0;             
000006EC: E1A07000    ;                 MOV R7, R0;             
000006F0: EBFFFFA7    ;                 BL popR0;              
000006F4: E0800007    ;                 ADD R0, R0, R7;              
000006F8: EBFFFFAF    ;                 BL pushR0;             
000006FC: EAFFFFCB    ;                 B while;              
00000700:             ; 
00000700:             ; case_iload      ;case iload:
00000700: EBFFFF9A    ;                 BL getCode;            
00000704: E2822001    ;                 ADD vmPC, vmPC, #1;   
00000708: EBFFFFB5    ;                 BL getVars;          
0000070C: EBFFFFAA    ;                 BL pushR0;           
00000710: EAFFFFC6    ;                 B while;           
00000714:             ;                 ;stack[--vmSP]= vars[code[vmPC++]];
00000714:             ;                 ;break;
00000714:             ; 
00000714:             ; case_istore     ;case istore:
00000714: EBFFFF95    ;                 BL getCode;          
00000718: E2822001    ;                 ADD vmPC, vmPC, #1;   
0000071C: E1A01000    ;                 MOV R1, R0;        
00000720: EBFFFF9B    ;                 BL popR0;            
00000724: EBFFFFB6    ;                 BL putVars;         
00000728: EAFFFFC0    ;                 B while;  
0000072C:             ;                 ;vars[code[vmPC++]]= stack[vmSP++];
0000072C:             ;                 ;break;          
0000072C:             ; 
0000072C:             ; case_bipush     ;case bipush: 
0000072C: EBFFFF8F    ;                 BL getCode;          
00000730: E2822001    ;                 ADD vmPC, vmPC, #1;   
00000734: EBFFFFA0    ;                 BL pushR0;        
00000738: EAFFFFBC    ;                 B while;           
0000073C:             ;                 ;stack[--vmSP]= code[vmPC++];
0000073C:             ;                 ;break;
0000073C:             ; 
0000073C:             ; case_imul       ;case imul:
0000073C: EBFFFF94    ;                 BL popR0;             
00000740: E1A0A000    ;                 MOV R10, R0;        
00000744: EBFFFF92    ;                 BL popR0;             
00000748: E0000A90    ;                 MUL R0, R0, R10;          
0000074C: EBFFFF9A    ;                 BL pushR0;           
00000750: EAFFFFB6    ;                 B while;              
00000754:             ;                 ;{int a= stack[vmSP++];
00000754:             ;                 ;int b= stack[vmSP++];
00000754:             ;                 ;stack[--vmSP]= a*b;
00000754:             ;                 ;}
00000754:             ;                 ;break;
00000754:             ; 
00000754:             ; case_iprint     ;case iprint:
00000754:             ;                 ;the following ARM code does:
00000754:             ;                 ;System.out.println(" " + stack[vmSP++]);
00000754: EBFFFF8E    ;                 BL  popR0
00000758: EF000004    ;                 SVC 4
0000075C: E3A0000A    ;                 MOV R0, #10
00000760: EF000000    ;                 SVC 0
00000764:             ; 
00000764: EAFFFFB1    ;                 B while; break             
00000768:             ; 
00000768:             ; case_stop       ;case stop:
00000768: E3A04001    ;                 MOV done, #1;        
0000076C: EAFFFFAF    ;                 B while;  
00000770:             ;                 ;done=true;
00000770:             ;                 ;break; 
00000770:             ;            
00000770:             ; case_if_icmplt  ;case if_icmplt -> value1 < value2 -> change vmPC to target (just like in ifgt)
00000770: EBFFFF87    ;                 BL popR0;              
00000774: E1A05000    ;                 MOV R5, R0;            
00000778: EBFFFF85    ;                 BL popR0;              
0000077C: E1A01000    ;                 MOV R1, R0;          
00000780: EBFFFF7A    ;                 BL getCode;             
00000784: E2822001    ;                 ADD vmPC, vmPC, #1;    
00000788: E0800002    ;                 ADD R0, R0, vmPC;       
0000078C: E2400002    ;                 SUB R0, R0, #2;        
00000790: E1510005    ;                 CMP R1, R5;                   
00000794: AA000000    ;                 BGE skip1;              
00000798: E1A02000    ;                 MOV vmPC, R0;          
0000079C: EAFFFFA3    ; skip1           B while;   break         
000007A0:             ; 
000007A0:             ; default         ;default:
000007A0:             ;                 ;the following ARM code does:
000007A0:             ;                 ;System.out.println("not implemented:" + code[vmPC-1]);
000007A0: E24F0FA7    ;                 ADR R0, _notimpl
000007A4: EF000003    ;                 SVC 3
000007A8: E2422001    ;                 SUB vmPC, vmPC, #1
000007AC: EBFFFF6F    ;                 BL  getCode
000007B0: EF000004    ;                 SVC 4
000007B4: E3A0000A    ;                 MOV R0, #10
000007B8: EF000000    ;                 SVC 0
000007BC:             ; 
000007BC: E3A04001    ;                 MOV done, #1;         
000007C0: EAFFFF9A    ;                 B while;     break        
000007C4:             ; 
000007C4:             ;                 ;                       end of switch
000007C4:             ; endwhile        ;                       end of while
000007C4: EF000002    ;         SVC 2   ;                       end of main
000007C8:             ;                 ;                       end of class
000007C8:             ; 

Symbol Table: Labels
: _stack                            000003F0  Local -- ARM
: iadd                              00000000  Value
: imul                              00000001  Value
: ifgt                              00000002  Value
: if_icmplt                         00000003  Value
: bipush                            00000004  Value
: go_to                             00000005  Value
: iload                             00000006  Value
: istore                            00000007  Value
: iprint                            00000008  Value
: stop                              00000009  Value
: code                              000003F0  Local -- ARM
: _trace1                           000004EC  Local -- ARM
: _trace2                           000004FC  Local -- ARM
: _trace3                           00000504  Local -- ARM
: _notimpl                          0000050C  Local -- ARM
: stack                             00000520  Local -- ARM
: vars                              00000548  Local -- ARM
: getCode                           00000570  Local -- ARM
: popR0                             00000594  Local -- ARM
: pushR0                            000005BC  Local -- ARM
: getVars                           000005E4  Local -- ARM
: putVars                           00000604  Local -- ARM
: main                              00000624  Local -- ARM
: while                             00000630  Local -- ARM
: switch                            00000688  Local -- ARM
: case_go_to                        000006B0  Local -- ARM
: case_ifgt                         000006C0  Local -- ARM
: skip2                             000006E4  Local -- ARM
: case_iadd                         000006E8  Local -- ARM
: case_iload                        00000700  Local -- ARM
: case_istore                       00000714  Local -- ARM
: case_bipush                       0000072C  Local -- ARM
: case_imul                         0000073C  Local -- ARM
: case_iprint                       00000754  Local -- ARM
: case_stop                         00000768  Local -- ARM
: case_if_icmplt                    00000770  Local -- ARM
: skip1                             0000079C  Local -- ARM
: default                           000007A0  Local -- ARM
: endwhile                          000007C4  Local -- ARM
